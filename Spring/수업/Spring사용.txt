Spring 사용하는방법 : sts, plug in
- Spring 4부터는 스프링 부트 사용
- 현재수업에서는 Spring Tools 3버전 사용
- Spring 개념은 디스패처 서블릿의 이해가 중요
-이클립스 버전 2021-12사용,  jdk11.0.13사용 (환경변수 설정) , 플러그인 사용

sts ( spring tools suite )
- spring.io/tools 검색해서 sts 설치 ( 플러그인 최적화해둔 것 )
- 스프링에 이클립스 기반의 최적화된 IDE ( 스프링에 특화된 이클립스 )
- 이클립스보다 무거움
- 이클립스로 실행하지만 다른 IDE

plug in
-이클립스 내에서 플러그 인으로 설치 ( eclipse marketplace )

maven
- pom.xml을 이용하여 라이브러리 설치를 도와줌

Spring project
-작업은 src에서 작업하고 해당 작업들은 target으로 들어가게 됨

POM : 프로젝트 객체 모델 : 현재 프로젝트에 관한 정보들을 관리함
pom.xml 
- xmlns : xml name space로 자동완성기능을 위해 사용
- xsi : 인증서같은 의미
- modelVersion : 현재 POM문서에 대한 버전
- groubId : 패키지 2레벨까지
- artifactId : 패키지 3레벨 이후
- name : 프로젝트이름 
- packaging : 선택지가 war(웹아카이브) 타입, jar (자바아카이브) 타입 2개 존재( 웹 사용이므로 지금은 war )
- version : 웹 어플리케이션 버전  
-properties : 변수 같은것 ( 현재 문서에서 사용할 변수 생성 )
-dependency : 프로젝트에 라이브러리를 담아둠 ( properties 에서 값 가져옴, 라이브러리는 Maven Repository에서 가져옴 )
	( 프로젝트의 Maven Dependencies 에 보면 해당 dependency의 version에 맞는 artifactId 존재 ( Maven이 설치해준 것 ), 
	확인 시 설치경로가 기본 설치경로로 되어있음   // 설치경로\groubId\artifactId\version 으로 maven dependency에서 확인가능 )
- build : 명령 수행할 것들을 넣어둠, 나중에 gradle로 사용 예정
- pom.xml에서 수정한 후 해당프로젝트 우클릭 -> maven -> update project로 변경사항 패치


web.xml
- 해당 xml 파일을 바탕으로 웹 프로젝트가 돌아감
- 스프링 컨테이너는 서블릿과 일반적인자바객체(POJO) 존재
- web-app : 가지고 있는 속성값 ( tomcat 버전에 따라 버전이 다르게 수정해야함 )
- context-param : 스프링 컨테이너에 관한 정의
- listener : 스프링 컨테이너 생성
- servlet : 애플리케이션 요청 처리 (init-param 을 활용하여 DispathcerServlet 설정 )
- servelt-mapping : 해당 url-pattern 링크로 들어오면 servlet-name 실행

-스프링컨테이너는 서블릿과 자바객체들이 존재, 스프링 컨테이너 안의 DispatcherServlet을 통해 들어온 url에 맞는 컨테이너
한테 req, resp 전달
- 스프링컨테이너는 root-context.xml 을 바탕으로 생성함 ( 스프링컨테이너에 객체를 추가시 해당 xml에 작성하면 됨 )
- servlet-context.xml은 스프링컨테이너의 클라이언트의 요청을 받기위한 컨텍스트 설정, 요청과 관련된 객체 정의
- servlet-context.xml의 bean은 자바객체 등록
- bean : applicationContext가 알고있는 객체, 즉 applicationContext가 만들어서 그안에 담고있는 객체 의미 


Maven 저장소 변경 ( 기존 저장소 사용시 충돌하는 경우가 많음 )
- window -> preference -> maven ->userSettings  -> xml 생성 후 해당 경로로 userSettings 변경 -> Update Settings클릭
( xml 만들때 maven settings.xml 검색 하여 참고, 해당 xml 파일에서 localRepository에 maven 저장할 저장소 폴더 경로 적기 )
(-- 현재 maven 폴더에 xml파일, libs  폴더 위치 --)


버전에 맞는 jar수정하기 ( maven을 이용한 jar 버전 수정 )
web.xml 
- web-app의 version에 tomcat version을 검색해서 해당 버전으로 변경 -> web.xml version 검색해서 해당 servlet 버전에 맞는 스키마 헤더로수정

web.xml 수정 후 pom.xml 수정
- servlet 주석처리되어있는 mvn repo 사이트에서 해당 dependency의 artifactId를 검색 ( 우선servlet-api 검색 )
-> 이후 해당groub id에 맞는 것 클릭 ( 이전했다는 Note가 있으면 그곳으로 이동 ), 검색한 tomcat 버전에 맞는 servlet 버전사용
-> 해당버전의 maven 텍스트필드 클릭하여 복사 -> dependency 지우고 붙여놓기
-> 마찬가지로 jsp-api도 진행
-> springframework-version 버전 변경 ( 일단 전자정부프레임워크가 4.3.25.RELEASE를 사용하므로 해당버전으로 변경 )
-> 해당 프로젝트 우클릭 -> maven update 실행

pom.xml에서 변경한 것 정리
1. java version
- source
- target
2. org.springframework-version
3. dependency > servlet
4. dependency > jsp

web.xml에서 변경한것 정리
1. web-app 태그의 속성값 ( web 버전에 맞는)

home.jsp 변경한것 정리
1. jstl 이노테이션 제거

servlet-context.xml
- annotation-driven : 있어야 어노테이션을 사용하는 것을 알수있음
- context : POJO들(컴포넌트)이 해당 경로를 탐색하여 존재하는지 확인


root-context.xml
- servlet-context와 다른점 이후 기술 예정	


spring-boot
- 위의 구성과는 다름 pom.mxl과 application.properties로 구성. 
