1. extends는 일반 클래스와 abstract 클래스 상속에 사용되고, implement는 interface 상속에 사용된다.
2. class가 class를 상속받을 땐 extends를 사용하고, interface가 interface를 상속 받을 땐 extends를 사용한다.
3. class가 interface를 사용할 땐 implements를 써야하고
4. interface가 class를 사용할 땐 implements를 쓸수 없다.
5. extends는 클래스 한 개만 상속 받을 수 있다.
6. extends 자신 클래스는 부모 클래스의 기능을 사용한다.
7. implements는 여러개 사용 가능하다.
8. implements는 설계 목적으로 구현 가능하다.
9. implements한 클래스는 implements의 내용을 다 사용해야 한다.

extends는 클래스를 확장하는 거고 implements는 인터페이스를 구현하는 것이다.
인터페이스와 보통 클래스의 차이는 인터페이스는 정의한 메소드를 구현하지 않아도 된다.
인터페이스를 상속받는 클래스에서 인터페이스에 정의된 메소드를 구현하면 된다.

- Interface : 자바에서 인터페이스는 동일한 목적을 가진 동일한 기능을 수행하려고 강제하는 것으로 쉽게 말하면 가이드라인, 공용 규칙 같은 것이다. 이는 자바의 다형성을 극대화하여 개발코드 수정을 줄이고 프로그램 유지보수성을 높인다. implements 키워드를 통해 인터페이스를 다른 클래스에서 구현 할 수 있다. Interface는 상수, 추상메소드, 디폴트메소드, 정적 메소드 등 4가지가 존재 ( https://limkydev.tistory.com/197 )
* 상수 : 인터페이스에서 값을 정해줄테니 함부로 바꾸지 말고 제공해주는 값만 참조해라 (절대적)
* 추상메소드 : 가이드만 줄테니 추상메소드를 오버라이팅해서 재구현해라. (강제적)
* 디폴트메소드 : 인터페이스에서 기본적으로 제공해주지만, 맘에 안들면 각자 구현해서 써라. (선택적)
* 정적메소드 : 인터페이스에서 제공해주는 것으로 무조건 사용 (절대적)

- Enum : 열거형이라고 불리며 서로 연관된 상수들의 집합을 의미. 장점으로는 코드가 단순해지며, 가독성이 좋고 인스턴스 생성과 상속을 방지하여 상수값의 타입안정성이 보장. enum class를 사용해 새로운 상수들의 타입을 정의함으로 정의한 타입을 가진 데이터값을 컴파일 시 체크. 키워드 enum을 사용하기 때문에 구현의 의도가 열거임을 분명하게 알 수 있음
* 코드가 단순해지며, 가독성이 좋음
* 인스턴스 생성과 상속을 방지하여 상수값의 타입안정성이 보장
* enum class를 사용해 새로운 상수들의 타입을 정의함으로 정의한 타입이외의 타입을 가진 데이터값을 컴파일시 체크
* 키워드 enum을 사용하기 때문에 구현의 의도가 열거임을 분명하게 알 수 있음
