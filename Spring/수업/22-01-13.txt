클라이언트 -> 스프링컨테이너로 요청시 순서
- 서블릿 -> 컨트롤러-> 서블릿 -> 뷰 리저버 -> 서블릿 -> 뷰

context
-스프링컨테이너는 서블릿과 자바객체들이 존재, 스프링 컨테이너 안의 DispatcherServlet을 통해 들어온 url에 맞는 컨테이너
한테 req, resp 전달
- 스프링컨테이너는 root-context.xml 을 바탕으로 생성함 ( 스프링컨테이너에 객체를 추가시 해당 xml에 작성하면 됨 )
- servlet-context.xml은 스프링컨테이너의 클라이언트의 요청을 받기위한 컨텍스트 설정, 요청과 관련된 객체 정의
- servlet-context.xml의 bean은 자바객체 등록
- bean : applicationContext가 알고있는 객체, 즉 applicationContext가 만들어서 그안에 담고있는 객체 의미 

servlet-context
- DispatcherServlet Context : 이 서블릿의 요청 처리 인프라를 정의
- annotation-driven : Spring MVC @Controller 프로그래밍 모델을 활성화
- resources : 해당 디렉토리에서 정적 리소스를 효율적으로 제공하여  해당 경로에 대한 HTTP GET 요청을 처리
- beans : 해당 클래스파일을 통해 객체 생성, 이후 property에서 변수를 만들어 객체로 전달 ( prefix : 접두사, suffix: 접미사 )
- context: component-scan : 해당 경로의 클래스 탐색함
- <resources mapping="/r/**" location="/resources/" /> : 정적인 데이터 명시 ,  r/** 형태면 http get 요청을 처리 
	( resources 아래 정적 파일들을 가져옴  ex) 해당 url > http://localhost:8888/app02/r/staticViews/test.html )

페이지 생성 규칙
1. 컨트롤러 생성
2. JSP 생성
3. 컨트롤러 등록, 연동


// 컨트롤러 메소드 규칙
1. 메소드 접근제한자는 무조건 public
2. return 값은 주소 가지고 있어야함
3. 매개변수는 있어도되고, 없어도됨
4. 메소드 이름은 자유

MyController.java 생성
- @Controller 어노테이션 추가 ( 추가 시 Spring Explorer에서 보면 컨트롤러에 추가된 걸 볼수 있음 // 스프링이 컨트롤하는 컨트롤러로 추가)
- 위의 메소드 규칙에 맞게 메소드 생성후 @RequestMapping("/(요청url)"), 혹은 @RequestMapping(value = "/join") 작성
-ex )	@RequestMapping(value = "/home")
		public String home() {
			return "home.";	// servlet-context.xml에 beans에서  ..ResuorceViewResolver에서 해당 경로 접두사와 .jsp 접미사를 추가해주기 때문
		}
- 혹은 return "/WEB-INF/views/" + str + ".jsp"; 같은 경로를 찾아주는 메소드 생성 
- post 방식 전송 : @RequestMapping(value = "/join", method = RequestMethod.POST) 처럼 작성해 원하는 메소드 실행 가능,
	 혹은 @GetMapping("/join"),  @PostMapping("/join")으로 대신사용가능
	( 이전에는 @RequestMapping(value="/join.do")와 같이 나타냈었음 , RequestMethod에는 GET, POST, PUT, DELETE 등이 존재 (RESP api method)) 


