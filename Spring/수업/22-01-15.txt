4가지 연결 예정 :  jdbc, dbcp, spring-jdbc, mybatis
-jdbc, dbcp : db 연결 도구 
-spring-jdbc, mybatis : db 명령 도구

pom.xml에 추가한 maven ( lib 다운 )
- ojdbc8, spring jdbc, dbcp, mybatis, mybatis-spring

servlet-context.xml에 추가	( 받아온 lib의 클래스를 등록하는 개념 ( 해당 lib에 존재하는 클래스 생성자에 맞는 매개변수(=property name)를 입력하여 객체 생성  ) )
- org.springframework.jdbc.datasource.DriverManagerDataSource
- org.apache.commons.dbcp2.BasicDataSource
- org.springframework.jdbc.core.JdbcTemplate
ex)	<!-- DB 설정 관련 ( spring-jdbc 등록 ) -->
	<beans:bean id="injunDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> <!-- id는 연결을 위한 이름으로 임의로 지정 -->
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver"></beans:property>
		<beans:property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"></beans:property>
		<beans:property name="username" value="KH"></beans:property>	<!-- DB user -->
		<beans:property name="password" value="KH"></beans:property>	<!-- DB password -->
	</beans:bean>
	
	<!-- dbcp  ( dbcp 등록 )-->
	<beans:bean id="injundbcpSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver"></beans:property>
		<beans:property name="url" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"></beans:property>
		<beans:property name="username" value="KH"></beans:property>	<!-- DB user -->
		<beans:property name="password" value="KH"></beans:property>	<!-- DB password -->
		<beans:property name="maxTotal" value="20"></beans:property>
		<beans:property name="maxIdle" value="10"></beans:property>
		<beans:property name="maxWaitMillis" value="3000"></beans:property>
	</beans:bean>
	
	<!-- Jdbc Template -->
	<beans:bean id="injunjdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="injunDataSource"></beans:property> <!-- 위에 등록한 db설정 id로 가져옴 -->
	</beans:bean>

- 현재 이렇게 적용한 pom.xml, servlet-context.xml을 다음에도 사용하기위해 파일 저장
- 이후 jdbcTemplate가 필요한 컨트롤러에 
	@Autowired			//  스프링컨테이너 안에 타입에 맞는 객체가 있다면 자동으로 객체 생성 )
	private JdbcTemplate jdbcTemplate; 를 추가하여 사용 

- controller에서 받아온 파라미터를 object 배열 형태로 만들고 sql문을 사용해서 jdbcTemplate.update(sql, params); 처럼 작성하여 사용
ex)	public String insert(String menu, int price) {
		String sql = "insert into menu(menu, price) values(?,?)";
		Object[] params = {menu, price};
		jdbcTemplate.update(sql, params);	// jdbcTemplate.update에서 sql과 오브젝트한 파라미터 작성

현재 국내에서는 mybatis 많이 사용하지만 현재 jpa가 떠오르는 기술이라고 하심

Mybatis
1. pom.xml에 추가 : mybatis, mybatis-spring
2. servlet-context.xml에 등록
- org.mybatis.spring.SqlSessionFactoryBean
- org.mybatis.spring.SqlSessionTemplate
ex)	<!-- SqlSessionFactory -->
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="injundbcpSource"></beans:property>
		<beans:property name="configLocation" value="경로설정"></beans:property>
		<beans:property name="mapperLocations" value="경로설정"></beans:property>
	</beans:bean>
	
	<!-- sqlSessionTemplate -->
	<beans:bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSession"/>
	</beans:bean>
3.  java src에 xml 생성 및 작성 ( mybatis-config로 임의로 지정해서 생성 )
- mybatis홈페이지에서 xml 설정파일 참고하여 작성	( https://mybatis.org/mybatis-3/ko/getting-started.html ) 
ex) 	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE configuration				<!-- 홈페이지에서 헤더부분 복사 -->
  	PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  	"http://mybatis.org/dtd/mybatis-3-config.dtd">
	<configuration>
		<settings>
			<setting name="autoMappingBehavior" value="FULL"/>	<!-- 설정 지정 -->
		</settings>
		<typeAliases>
			<typeAlias type="com.kh.app09.member.model.vo.MemberVo" alias="membervo"/> <!-- 쉽게 사용하기 위한 별칭 지정 -->
		</typeAliases>
	</configuration> 
- 이후 아까 작생했던 servelt-context.xml의 configLacation value에 해당 파일 경로 지정 ( 경로지정 팁은 아래에 따로 작성함 )




경로 지정 팁
- 주로 해당 경로의 사용할 파일에 따라서 source파일 경로는 .으로 하고, resource의 경로는 /로 하되 예외의 경우도 존재하므로 판단, 검색해서 사용하는것이 맞음
- 해당 프로젝트의 properties에서 java build path -> Source 를 보면 해당 경로들이 classpath에 포함됨, 이후 경로 작성
ex)	classpath:/com/kh/app09/mybatis/mybatis-config.xml
