클라이언트 - 서버  데이터 전달
- http 를 이용하는 것으로 규약존재 ( http는 데이터를 주고받는 형태 )

컨트롤러에서 페이지로 이동하지 말고 text만 화면에 출력
- 매개변수에 
ex)	@GetMapping("test")
	@ResponseBody				// 뷰리저버에 관리를 받지 않음, 원하는 값을 클라이언트로 직접 전달할 때 사용
	public void test(HttpServletResponse response) throws IOException {
		return "test";
	}


파일전송
1. DB에서 데이터 가져오기 ( path, size, name )
2. 파일 가져오기 ( 서버에서 )
3. 파일 -> 바이트
4. 파일 전송 준비 ( header 수정 )
5. 바이트 전송

서버로부터 파일 다운로드 받기  ( 다른부분은 파일전송의 4, 5번 부분 )
- response 방식
- spring 방식


Project Lombok 설치 ( 현재는 maven으로 설치 후 해당위치의 lombok.jar 실행 )
- IDE( 현재는이클립스 ) 에다가 설치 ( 실행하면 IDE의 ini에 명령 한줄 추가 )
- 프로젝트에도 추가 ( 현재는 spring에서 사용, Maven으로 설치 )

lombok이 해주는것
- @어노테이션을 이용하여 아래를 자동으로 생성
- getter				@Data, @Getter
- setter				@Data, @Setter
- toString				@ToString	( 객체 출력시 toString처럼 자동으로 출력해줌 )
- 기본생성자			@NoArgsConstructor
- 모든 파라미터가 있는 생성자		@AllArgsConstructor
- 빌더				@Builder

생성자와 setter중 좋은것?
- 대체적으로는 생성자, 하지만 장단점이 존재
- 생성자는 객체안에서만 객체의 값을 처리해서 값을 변하지 못하게 함 ( setter를 지우고, allargument 생성자가 존재 )
-  setter은 각자 생성이 가능하고, 가독성이 좋다

빌더
- 빌드를 찍기 전까지 객체를 생성하지 않음 
- setter와 생성자의 장점이 존재
- ex)	MemberVo vo = MemberVo.builder()
				.id("id")
				.pwd("pwd")
				.name("name")
				.build();
